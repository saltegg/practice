package fzu.com.lc.pointOffer;
 
//ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåËæìÂÖ•‰∏Ä‰∏™ÈìæË°®ÁöÑÂ§¥ËäÇÁÇπÔºåÂèçËΩ¨ËØ•ÈìæË°®Âπ∂ËæìÂá∫ÂèçËΩ¨ÂêéÈìæË°®ÁöÑÂ§¥ËäÇÁÇπ„ÄÇ 
//
// 
//
// Á§∫‰æã: 
//
// ËæìÂÖ•: 1->2->3->4->5->NULL
//ËæìÂá∫: 5->4->3->2->1->NULL 
//
// 
//
// ÈôêÂà∂Ôºö 
//
// 0 <= ËäÇÁÇπ‰∏™Êï∞ <= 5000 
//
// 
//
// Ê≥®ÊÑèÔºöÊú¨È¢ò‰∏é‰∏ªÁ´ô 206 È¢òÁõ∏ÂêåÔºöhttps://leetcode-cn.com/problems/reverse-linked-list/ 
// Related Topics ÈìæË°® 
// üëç 164 üëé 0

import java.util.ArrayDeque;
import java.util.Deque;

public class FanZhuanLianBiaoLcof{
    public static void main(String[] args) {
	    Solution solution = new FanZhuanLianBiaoLcof().new Solution();
	}
	//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class ListNode {
    int val;
    ListNode next;
    ListNode(int x) { val = x; }
}

class Solution {
    public ListNode reverseList(ListNode head) {

        if (head == null) return null;
        ListNode tail = head;
        Deque<Integer> deque = new ArrayDeque<>();
        while (tail != null) {
            deque.addLast(tail.val);
            tail = tail.next;
        }
        tail = head;
        while (!deque.isEmpty()) {
            tail.val = deque.pollLast();
            tail = tail.next;
        }
        return head;
    }

    public ListNode reverseList1(ListNode head) {
        ListNode pre = null, cur = head, next = null;
        while(cur != null) {
            next = cur.next;
            cur.next = pre;
            pre = cur;
            cur = next;
        }
        return pre;
    }
}
//leetcode submit region end(Prohibit modification and deletion)

}